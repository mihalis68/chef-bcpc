# -*- mode: ruby -*-
# vi: set ft=ruby :
# This is a Vagrantfile to automatically provision a local BCPC cluster.

require 'openssl' # used to validate CA certificates
require 'uri' # used to parse the local mirror if one is given
require 'json' # used to parse cluster machines configuration

Vagrant.require_version ">= 1.7.0"
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'

# Load some other vagrantfiles, user libs
current_dir = File.expand_path File.dirname(__FILE__)
libdir = File.join current_dir, 'lib'
Dir.foreach(libdir) {|f|
  # Check extensions?
  libpath = File.join libdir, f
  load libpath if File.ftype(libpath) == 'file'
}

# if being run via BOOT_GO.sh, ENV['REPO_ROOT'] will be the root of the repo;
# if it is not set, set it ourselves
ENV['REPO_ROOT'] ||= %x{git rev-parse --show-toplevel}.strip

# Modified URI HTTP/S classes to prevent stripping of well-known ports
module URI
  class HTTPS
    def to_s
      '%s://%s:%s' % [self.scheme, self.host, self.port]
    end
  end
  class HTTP
    def to_s
      '%s://%s:%s' % [self.scheme, self.host, self.port]
    end
  end
end

# pull in the bootstrap config defaults and overrides (even though these would already
# be set by BOOT_GO.sh, do it again here so that Vagrant always has access to all
# configuration variables)
def extract_and_export_envvar(line)
  matches = line.match(/^\s*(?!#)(export |)(?<name>.+)=(?<value>.+)$/)
  unless matches.nil?
    name, value = matches[:name], matches[:value]
    # this blob interpolates existing environment variables in
    interpolated_value = value.dup
    envvars_to_interpolate = interpolated_value.scan /\$\w+/
    envvars_to_interpolate.flatten.each {|v| interpolated_value.gsub!(v, ENV[v.tr('$', '')])}
    explanation = (ENV[name] ? "Overriding " : "Setting ") + "#{name} = #{interpolated_value}"
    explanation << " (originally #{value})" if interpolated_value != value
    # puts explanation
    ENV[name] = interpolated_value
  end
end

config_path = File.join ENV['REPO_ROOT'], 'bootstrap', 'config'
config_defaults = File.join(config_path, 'bootstrap_config.sh.defaults')
config_overrides = File.join(config_path, 'bootstrap_config.sh.overrides')

File.open(config_defaults).each do |line|
  extract_and_export_envvar(line)
end
if File.exist?(config_overrides)
  File.open(config_overrides).each do |line|
    extract_and_export_envvar(line)
  end
end

# list any package names to be automatically removed here
$packages_to_remove = []

# if a directory with additional CA certs is provided, test each file in there to
# verify that it's a certificate ending in .crt (due to update-ca-certificates restrictions)
# and then add it to a script to be run inside each VM
# script will also test the file to see if it appears to contain multiple certificates,
# which update-ca-certificates does not seem to handle reliably
$update_ca_certificates_script = ""
unless ENV['BOOTSTRAP_ADDITIONAL_CACERTS_DIR'].nil? or ENV['BOOTSTRAP_ADDITIONAL_CACERTS_DIR'].empty?
  cacerts_dir = Dir.new(ENV['BOOTSTRAP_ADDITIONAL_CACERTS_DIR'])
  files_in_cacerts_dir = cacerts_dir.entries.select{|e| not ['.', '..'].include? e}
  files_in_cacerts_dir.each do |f|
    next if File.directory?(File.join(cacerts_dir, f))
    begin
      unless f.end_with? '.crt'
        fail "All files in #{ENV['BOOTSTRAP_ADDITIONAL_CACERTS_DIR']} must end in .crt due to update-ca-certificates restrictions."
      end
      # read in the certificate and normalize DOS line endings to UNIX
      cert_raw = File.read(File.join(ENV['BOOTSTRAP_ADDITIONAL_CACERTS_DIR'], f)).gsub(/\r\n/, "\n")
      if cert_raw.scan('-----BEGIN CERTIFICATE-----').length > 1
        fail "Multiple certificates detected in #{File.join(ENV['BOOTSTRAP_ADDITIONAL_CACERTS_DIR'], f)}, please split them into separate certificates."
      end
      cert = OpenSSL::X509::Certificate.new(cert_raw) # test that the cert is valid
      dest_cert_path = File.join('/usr/local/share/ca-certificates', f)
      $update_ca_certificates_script << <<-EOH
        echo -ne "#{cert_raw}" > #{dest_cert_path}
      EOH
    rescue OpenSSL::X509::CertificateError
      fail "Certificate #{File.join(ENV['BOOTSTRAP_ADDITIONAL_CACERTS_DIR'], f)} is not a valid PEM certificate, aborting."
    end
  end
  $update_ca_certificates_script << <<-EOH
    update-ca-certificates
  EOH
end

# if proxies are provided, configure them before configuring any local mirror override
# RUN THIS SCRIPT WITH sudo AND privileged = false so that $HOME is set to the
# value of the non-root user
$proxy_configuration_script = <<-EOH
  sudo touch /etc/apt/apt.conf
  touch $HOME/proxy_config.sh
EOH
# some ugliness for legacy configs
BOOTSTRAP_HTTP_PROXY_URL = URI(ENV['BOOTSTRAP_HTTP_PROXY_URL'] || 'http://%s' % ENV['BOOTSTRAP_HTTP_PROXY'])
BOOTSTRAP_HTTPS_PROXY_URL = URI(ENV['BOOTSTRAP_HTTPS_PROXY_URL'] || 'http://%s' % ENV['BOOTSTRAP_HTTPS_PROXY'])
unless BOOTSTRAP_HTTP_PROXY_URL.host.nil?
  $proxy_configuration_script << <<-EOH
    echo 'Acquire::http::Proxy "#{BOOTSTRAP_HTTP_PROXY_URL.to_s}";' | sudo tee -a /etc/apt/apt.conf
    echo 'export http_proxy=#{BOOTSTRAP_HTTP_PROXY_URL.to_s}' | tee -a $HOME/proxy_config.sh
  EOH
end
unless BOOTSTRAP_HTTPS_PROXY_URL.host.nil?
  $proxy_configuration_script << <<-EOH
    echo 'Acquire::https::Proxy "#{BOOTSTRAP_HTTPS_PROXY_URL.to_s}";' | sudo tee -a /etc/apt/apt.conf
    echo 'export https_proxy=#{BOOTSTRAP_HTTPS_PROXY_URL.to_s}' | tee -a $HOME/proxy_config.sh
    mkdir -p $HOME/.pip
    printf "[global]\nproxy = #{BOOTSTRAP_HTTPS_PROXY_URL.to_s}\n" > $HOME/.pip/pip.conf
  EOH
end

# this script tests proxy servers from inside the bootstrap node
$testing_proxy_servers_script = <<-EOH
  . $HOME/proxy_config.sh
  FAILED=0
  HTTP_PROXY_TEST=$(curl http://www.google.com 2>&1)
  if [[ $? != 0 ]]; then
    echo "HTTP proxy test failed, check HTTP proxy configuration:"
    echo -e "$HTTP_PROXY_TEST"
    FAILED=1
  fi
  HTTPS_PROXY_TEST=$(curl https://github.com 2>&1)
  if [[ $? != 0 ]]; then
    echo -e "HTTPS proxy test failed, check HTTPS proxy configuration and SSL certificates:"
    echo -e "$HTTPS_PROXY_TEST"
    FAILED=1
  fi
  exit $FAILED
EOH

# compute the repository configuration script
$repos_script = <<-EOH
  #!/bin/bash
  hash -r
  install -d -m0755 -g adm /var/log/vagrant
  exec &>>/var/log/vagrant/provision.log
  date --rfc-3339=s
EOH

unless ENV['BOOTSTRAP_APT_MIRROR'].nil? or ENV['BOOTSTRAP_APT_MIRROR'].empty?
  local_mirror_host = URI(ENV['BOOTSTRAP_APT_MIRROR']).host
  fail "#{ENV['BOOTSTRAP_APT_MIRROR']} is an invalid URL, aborting build" if local_mirror_host.nil?
  $repos_script << <<-EOH
    cp /etc/apt/sources.list /etc/apt/sources.list.bak
    sed -i 's|http://archive\.ubuntu\.com/ubuntu|#{ENV['BOOTSTRAP_APT_MIRROR']}|g' /etc/apt/sources.list
    sed -i 's|http://security\.ubuntu\.com/ubuntu|#{ENV['BOOTSTRAP_APT_MIRROR']}|g' /etc/apt/sources.list
    sed -i s/^deb-src/\#deb-src/g /etc/apt/sources.list
    touch /etc/apt/apt.conf
    echo 'Acquire::http::Proxy::#{local_mirror_host} "DIRECT";' | tee -a /etc/apt/apt.conf
  EOH
end

# try to apt-get update immediately so that the bootstrap does not wander along for a while
# and waste everyone's time in case our repo configuration set above is broken
$repos_script << <<-EOH
  rm -f /etc/apt/sources.list.d/ubuntu-esm-infra-trusty.list
  apt-get update
  apt-get -y autoremove
EOH
# END repository configuration script

# since these boxes do not come with swap, this script will add a swap file on disk
# (repartionining /dev/sda would be a dreadful chore)
$add_swap_script = <<-EOH
  #!/bin/bash
  swap_path='/swap'
  swap_size="#{ENV['VM_SWAP_SIZE'] ||= 8192}M"
  # This could be a re-provision
  if grep -qw "^${swap_path}" /proc/swaps ; then
    swapoff "$swap_path"
  fi
  fallocate -l $swap_size "$swap_path"
  truncate -s $swap_size "$swap_path"
  chmod 600 "$swap_path"
  mkswap -f "$swap_path"
  /bin/sync
  swapon "$swap_path"
  if ! grep -qw "^${swap_path}" /etc/fstab ; then
    echo "$swap_path none swap defaults 0 0" | tee -a /etc/fstab
  fi
EOH

Vagrant.configure("2") do |config|
  cluster_config = File.join(config_path, ENV['CLUSTER'] + '.json')
  cluster = JSON.parse(File.read(cluster_config))
  bootstrap_node = cluster['nodes']['bcpc-dev-bootstrap']['ip_address']
  # Define the network names (random) here. There will be 3 classes of networks:
  #   - management
  #   - storage
  #   - tenant
  # Attempt to get from cluster configuration file or generate if absent
  netname = Proc.new {|label|
    begin
      cluster['networks'][label]['name']
    rescue
      nil
    end
  }
  networks = {
    management: netname['management'] || generate_network_name('management'),
    storage: netname['storage'] || generate_network_name('storage'),
    tenant: netname['tenant'] || generate_network_name('tenant'),
  }
  cluster['nodes'].each do |node, key|
    vm = node
    # Remove name prefix for shorter Vagrant hostnames
    vm = vm.sub('bcpc-dev-', '')
    config.ssh.forward_x11 = true
    config.vm.define vm do |m|
      bootstrap_domain = (ENV['BCPC_HYPERVISOR_DOMAIN'] or "bcpc.example.com")
      m.vm.hostname = "bcpc-dev-#{vm}.#{bootstrap_domain}"
      m.vm.network :private_network,
                   virtualbox__intnet: networks[:management],
                   ip: cluster['nodes'][node]['ip_address'],
                   netmask: '255.255.255.224'
      [networks[:storage], networks[:tenant]].each do |network|
        m.vm.network :private_network,
                     virtualbox__intnet: network,
                     auto_config: false
      end

      # reconfigure eth0 as static to remove default route via Virtualbox NAT
      config.vm.provision "delete-default-gw-on-eth0", type: "shell",
        run: "always",
        path: 'reconfigure-eth0-on-vms.sh',
        privileged: true

      # add temporary default router to faciliate convergence without virtual
      # router
      config.vm.provision "add-default-gw", type: "shell",
        run: "always",
        inline: "route add default gw #{cluster['nodes'][node]['gateway']}"

      if ENV['REPO_ROOT'].nil? or ENV['REPO_MOUNT_POINT'].nil?
        fail "REPO_ROOT and REPO_MOUNT_POINT must be set in the environment."
      end
      m.vm.synced_folder(ENV['REPO_ROOT'], ENV['REPO_MOUNT_POINT'])
      if ENV['BOOTSTRAP_CACHE_DIR'].nil? or ENV['FILECACHE_MOUNT_POINT'].nil?
        fail "BOOTSTRAP_CACHE_DIR and FILECACHE_MOUNT_POINT must be set in the environment."
      end
      m.vm.synced_folder(ENV['BOOTSTRAP_CACHE_DIR'], ENV['FILECACHE_MOUNT_POINT'])
      m.vm.synced_folder ".", "/vagrant", disabled: true

      # fix no-tty error
      m.vm.provision "fix-no-tty", type: "shell" do |s|
        s.privileged = false
        s.inline = "sudo sed -i '/tty/!s/mesg n/tty -s \\&\\& mesg n/' /root/.profile"
      end

      # configure extra CA certificates
      m.vm.provision "configure-ca-certificates", type: "shell" do |s|
        s.inline = $update_ca_certificates_script
      end

      # configure proxy servers (do not run as root)
      m.vm.provision "configure-proxy-servers", type: "shell" do |s|
        s.privileged = false
        s.inline = $proxy_configuration_script
      end

      # if a local package mirror is set, try it early so that the user can be
      # warned and fix it instead of waiting until all the VMs are set up
      unless ENV['BOOTSTRAP_APT_MIRROR'].nil? or ENV['BOOTSTRAP_APT_MIRROR'].empty?
        m.vm.provision "test-local-package-mirror", type: "shell" do |s|
          s.privileged = false
          s.inline = "curl --connect-timeout 5 -s -S #{ENV['BOOTSTRAP_APT_MIRROR']} 1>/dev/null"
        end
      end

      # from bootstrap node only: test proxy servers from inside to determine whether
      # everything's set up properly
      if vm == 'bootstrap'
        m.vm.provision "testing-proxy-servers", type: "shell" do |s|
          s.privileged = false
          s.inline = $testing_proxy_servers_script
        end
      end

      # set up repositories
      m.vm.provision "configure-repositories", type: "shell" do |s|
        s.inline = $repos_script
      end

      # configure a hostfile entry with the IP of the bootstrap node (for Chef)
      m.vm.provision "configure-bootstrap-hostfile-entry", type: "shell" do |s|
        s.inline = "echo -e '#{bootstrap_node}\tbcpc-dev-bootstrap.#{bootstrap_domain}\n' >> /etc/hosts"
      end

      # clean up some packages installed in this image by default
      m.vm.provision "clean-up-unnecessary-packages", type: "shell" do |s|
        s.inline = "apt-get remove -y #{$packages_to_remove.join(' ')}"
      end if $packages_to_remove.length > 0

      # add swap space
      m.vm.provision "add-swap-space", type: "shell" do |s|
        s.inline = $add_swap_script
      end

      m.vm.box = "trusty64"
      m.vm.box_url = "#{ENV['BOOTSTRAP_CACHE_DIR']}/trusty-server-cloudimg-amd64-vagrant-disk1.box"

      if vm == 'bootstrap'
        memory = ( ENV["BOOTSTRAP_VM_MEM"] or "2048" )
        cpus = ( ENV["BOOTSTRAP_VM_CPUS"] or "2" )
      else
        memory = ( ENV["CLUSTER_VM_MEM"] or "2560" )
        cpus = ( ENV["CLUSTER_VM_CPUS"] or "2" )
        disk_size = ( ENV["CLUSTER_VM_DRIVE_SIZE"] or "20480" )
      end

      m.vm.provider :virtualbox do |vb|
        vb.name = node
        vb.memory = memory
        vb.cpus = cpus

        vb.customize ["modifyvm", :id, "--nictype2", "82543GC"]
        vb.customize ["modifyvm", :id, "--vram", "16"]
        vb.customize ["modifyvm", :id, "--largepages", "on"]
        vb.customize ["modifyvm", :id, "--nestedpaging", "on"]
        vb.customize ["modifyvm", :id, "--vtxvpid", "on"]
        vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
        vb.customize ["modifyvm", :id, "--ioapic", "on"]
        vb.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
        vb.customize ["modifyvm", :id, "--uart2", "0x2F8", "3"]
        vb.customize ["modifyvm", :id, "--uartmode1", "disconnected"]
        vb.customize ["modifyvm", :id, "--uartmode2", "disconnected"]

        # this is an unpleasing hack to locate the VM on disk, so that additional disks can be stored with it
        # this assumes that all VMs will be going into the default VirtualBox folder
        begin
          default_vm_config_file = %x[VBoxManage list systemproperties | grep 'Default machine folder']
          default_vm_loc = default_vm_config_file.match(/^Default machine folder:\s+(.+)$/)[1]
          vm_dir = File.join(default_vm_loc, vm)
        rescue
          fail "Unable to locate VM #{vm} on disk, terminating"
        end

        if vm == 'bootstrap'
          # on the bootstrap node these disks are not used by pure Vagrant, but will be used by Ansible scripts
          # sdb is /mnt and sdc is /bcpc
          disks = {'b' => ( ENV["BOOTSTRAP_VM_DRIVE_SIZE"] or "20480" ), 'c' => 204800}
        else
          disks = Hash[('b'..'e').collect {|x| [x, disk_size]}]
        end

        disks.each_with_index do |disk, disk_idx|
          disk_file = File.join(vm_dir, "#{vm}-#{disk[0]}.vdi")
          unless File.exist?(disk_file)
            vb.customize ["createhd", "--filename", disk_file, "--size", disk[1]]
            vb.customize ["storageattach", :id, "--storagectl", "SATAController", "--device", "0", "--port", "#{disk_idx+1}", "--type", "hdd", "--medium", disk_file]
          end # File.exist
        end # disks.each

      end # machine.vm.provider :virtualbox do |vb|
    end # config.vm.define vm do |machine|
  end # $vms_to_build.each_with_index
end # Vagrant.configure("2") do |config|
